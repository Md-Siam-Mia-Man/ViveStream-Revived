; setup.iss
; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "ViveStream"
#define MyAppPublisher "Md. Siam Mia"
#define MyAppURL "https://github.com/Md-Siam-Mia-Main/ViveStream-Revived"
#define MyAppExeName "vivestream.exe"

; --- IMPORTANT ---
; The value for MyAppVersion is passed in automatically
; by the `build-installer.js` script.
; The value defined here is only a fallback for manual compilation.

; Step 4: Inno Setup checks if 'MyAppVersion' was defined by the compiler command.
; If it was, this block is skipped. If not, it uses the fallback.
#ifndef MyAppVersion
#define MyAppVersion "3.9.5"
#endif

#ifndef SourceAppPath
#define SourceAppPath "release\vivestream-win32-x64"
#endif

#ifndef AppIcon
#define AppIcon "assets\icon.ico"
#endif


[Setup]
; --- CRITICAL FOR UPGRADES ---
; This AppId is the unique identifier for ViveStream.
; It MUST remain the same for all future versions to ensure
; that new installations correctly upgrade existing ones.
; DO NOT CHANGE THIS VALUE.
AppId={{FC44F321-AE31-46B5-B6B2-BA2671A4C86C}}

AppName={#MyAppName}
; Step 5: The AppVersion directive uses the value of the 'MyAppVersion' variable.
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
OutputBaseFilename=ViveStream-Setup-v{#MyAppVersion}
Compression=lzma
SolidCompression=yes
WizardStyle=modern
UninstallDisplayIcon={app}\{#MyAppExeName}
SetupIconFile={#AppIcon}
CloseApplications=yes
RestartApplications=no
UninstallLogMode=append

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Messages]
english.SetupAppTitle=ViveStream Setup
english.SetupHeader=ViveStream Setup
english.WelcomeLabel2=This will install {#MyAppName} on your computer. To continue, click Next.

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "{#SourceAppPath}\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[UninstallRun]
Filename: "{cmd}"; Parameters: "/C taskkill /f /im {#MyAppExeName}"; Flags: runhidden

[UninstallDelete]
Type: filesandordirs; Name: "{app}"

[Code]
var
  DeleteDataCheck: TNewCheckBox;

procedure InitializeUninstallProgressForm;
begin
  DeleteDataCheck := TNewCheckBox.Create(UninstallProgressForm);
  with DeleteDataCheck do
  begin
    Parent := UninstallProgressForm;
    Left := UninstallProgressForm.ProgressBar.Left;
    Top := UninstallProgressForm.ProgressBar.Top + UninstallProgressForm.ProgressBar.Height + 16;
    Width := UninstallProgressForm.ProgressBar.Width;
    Caption := 'Delete all downloaded media and settings';
    Checked := False;
  end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
  DataPath: String;
begin
  if (CurUninstallStep = usPostUninstall) and (DeleteDataCheck.Checked) then
  begin
    DataPath := ExpandConstant('{userpf}\ViveStream');
    if DirExists(DataPath) then
    begin
      Log(Format('User checked option to delete data. Deleting: %s', [DataPath]));
      DelTree(DataPath, True, True, True);
    end
    else
    begin
      Log(Format('User checked option to delete data, but directory not found: %s', [DataPath]));
    end;
  end;
end;